#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        Main {
            bindings = <
&kp CAPSLOCK    &kp N1      &kp N2        &kp N3        &kp N4  &kp N5         &kp UP_ARROW     &kp N6       &kp N7     &kp N8          &kp N9           &kp N0         &kp BACKSPACE
&kp TAB         &kp Q       &kp W         &kp E         &kp R   &kp T          &kp DOWN_ARROW   &kp Y        &kp U      &kp I           &kp O            &kp P          &kp DELETE
&kp LEFT_SHIFT  &kp A       &kp S         &kp D         &kp F   &kp G          &kp LEFT_ARROW   &kp H        &kp J      &kp K           &kp L            &kp SEMI       &mt RIGHT_SHIFT APOS
&kp LCTRL       &kp Z       &kp X         &kp C         &kp V   &kp B          &kp RIGHT_ARROW  &kp N        &kp M      &kp COMMA       &kp DOT          &kp FSLH       &mt RCTRL BACKSLASH
&kp C_MUTE      &kp ESCAPE  &sk LEFT_GUI  &sk LEFT_ALT  &mo 1   &lt 1 SPACE    &kp ENTER        &lt 1 SPACE  &kp ENTER  &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp BACKSPACE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Main";
        };

        Ex {
            bindings = <
&trans      &kp F1        &kp F2         &kp F3            &kp F4             &kp F5          &mmv MOVE_UP     &kp F6     &kp F7    &kp F8      &kp F9     &kp F10           &trans
&trans      &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8      &kp NUMBER_9       &kp NUMBER_0    &mmv MOVE_DOWN   &kp PG_UP  &kp HOME  &kp UP      &kp END    &kp MINUS         &kp EQUAL
&trans      &kp TILDE     &kp UNDER      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PLUS        &mmv MOVE_LEFT   &kp PG_DN  &kp LEFT  &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &kp GRAVE     &kp MINUS      &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp EQUAL       &mmv MOVE_RIGHT  &trans     &trans    &kp INSERT  &kp F11    &kp F12           &kp PRINTSCREEN
&kp C_MUTE  &trans        &kp BACKSPACE  &trans            &trans             &kp RET         &mkp LCLK        &trans     &trans    &trans      &trans     &trans
            >;

            display-name = "Ex";
            sensor-bindings = <&scroll_encoder>;
        };

        Misc {
            bindings = <
&trans           &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4    &mmv MOVE_UP     &trans  &trans  &trans  &trans  &trans  &trans
&trans           &bt BT_CLR       &bt BT_CLR_ALL   &out OUT_BLE     &out OUT_USB     &soft_off       &mmv MOVE_DOWN   &trans  &trans  &trans  &trans  &trans  &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &trans          &mmv MOVE_LEFT   &trans  &trans  &trans  &trans  &trans  &trans
&rgb_ug RGB_EFF  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &trans          &mmv MOVE_RIGHT  &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans           &trans           &trans           &tog 3          &mkp LCLK        &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Space_Lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp SPACE    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
